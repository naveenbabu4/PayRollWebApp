{"ast":null,"code":"var _class;\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class ProcessHTTPMsgService {\n  constructor() {}\n  handleError(error) {\n    let errMsg;\n    if (error.error instanceof ErrorEvent) {\n      errMsg = error.error.message;\n    } else {\n      errMsg = `${error.status} - ${error.statusText || ''} ${error.error}`;\n    }\n    return throwError(errMsg);\n  }\n}\n_class = ProcessHTTPMsgService;\n_class.ɵfac = function ProcessHTTPMsgService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["throwError","ProcessHTTPMsgService","constructor","handleError","error","errMsg","ErrorEvent","message","status","statusText","factory","ɵfac","providedIn"],"sources":["C:\\Users\\SBAHUNAD\\Desktop\\IDigital\\IDigitalPractice\\Project\\PayrollWeb\\PayrollManagement\\src\\app\\services\\process-httpmsg.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { throwError } from 'rxjs';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProcessHTTPMsgService {\r\n\r\n  constructor() { }\r\n  public handleError(error: HttpErrorResponse | any) {\r\n    let errMsg: string;\r\n\r\n    if (error.error instanceof ErrorEvent) {\r\n      errMsg = error.error.message;\r\n    } else {\r\n      errMsg = `${error.status} - ${error.statusText || ''} ${error.error}`;\r\n    }\r\n\r\n    return throwError(errMsg);\r\n  }\r\n}\r\n"],"mappings":";AACA,SAASA,UAAU,QAAQ,MAAM;;AAKjC,OAAM,MAAOC,qBAAqB;EAEhCC,YAAA,GAAgB;EACTC,WAAWA,CAACC,KAA8B;IAC/C,IAAIC,MAAc;IAElB,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrCD,MAAM,GAAGD,KAAK,CAACA,KAAK,CAACG,OAAO;KAC7B,MAAM;MACLF,MAAM,GAAG,GAAGD,KAAK,CAACI,MAAM,MAAMJ,KAAK,CAACK,UAAU,IAAI,EAAE,IAAIL,KAAK,CAACA,KAAK,EAAE;;IAGvE,OAAOJ,UAAU,CAACK,MAAM,CAAC;EAC3B;;SAbWJ,qBAAqB;;mBAArBA,MAAqB;AAAA;;SAArBA,MAAqB;EAAAS,OAAA,EAArBT,MAAqB,CAAAU,IAAA;EAAAC,UAAA,EAFpB;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}