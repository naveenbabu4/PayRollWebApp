{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:\\Users\\SAGOSANG\\Desktop\\PayrollManagementSystemWeb\\PayrollManagementSystemWeb\\src\\app\\services\\admin.service.ts"],"sourcesContent":["import { Injectable} from '@angular/core';\nimport { Allowance } from '../models/allowance.model';\nimport { HttpClient } from '@angular/common/http';\nimport { ProcessHTTPMsgService } from './process-httpmsg.service';\nimport { HttpHeaders } from '@angular/common/http';\nimport { baseURL } from '../shared/baseurl';\nimport { catchError, Observable,map } from 'rxjs';\nimport { AddEmployee } from '../models/add-employee.model';\nimport { UserViewModel } from '../models/user.model';\nimport { AddAdmin } from '../models/add-admin.model';\nimport {}\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminService {\n  constructor(private http:HttpClient, private processHTTPMsgService:ProcessHTTPMsgService) { }\n\n  async AddAllowanceUser(allowance: Allowance):Promise<Observable<Allowance>> {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type':  'application/json'\n      })\n    };\n    return this.http.post<Allowance>(baseURL + 'AdminController/AddClass',allowance, httpOptions)\n      .pipe(catchError(this.processHTTPMsgService.handleError));\n  }\n\n\n  async AddEmployee(addEmployee: AddEmployee):Promise<Observable<AddEmployee>> {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type':  'application/json'\n      })\n    };\n    return this.http.post<AddEmployee>(baseURL + 'AdminController/CreateEmployee',addEmployee, httpOptions)\n      .pipe(catchError(this.processHTTPMsgService.handleError));\n  }\n \n  async GetEmployee():Promise<Observable<UserViewModel>>{\n    return this.http.get<UserViewModel>(baseURL + \"\")\n    .pipe(map(users => users))\n    .pipe(catchError(this.processHTTPMsgService.handleError));\n  }\n\n  async GetAdmin():Promise<Observable<AddAdmin>>{\n    return this.http.get<AddAdmin>(baseURL + \"\")\n    .pipe(map(users => users))\n    .pipe(catchError(this.processHTTPMsgService.handleError));\n  }\n\n  async GetClass():Promise<Observable<ClassViewModel>>{\n    return this.http.get<ClassViewModel>(baseURL + \"\")\n    .pipe(map(users => users))\n    .pipe(catchError(this.processHTTPMsgService.handleError));\n  }\n}\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}